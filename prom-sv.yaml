kind: Service
apiVersion: v1
metadata:
  name: prometheus-1
  labels:
    k8s-app: prometheus
    app.kubernetes.io/name: prometheus-1
    app.kubernetes.io/component: prometheus
spec:
  ports:
    # Exposes `http` and `TCP` ports `9090` using the default `ClusterIP` Service type
    - name: http
      port: 9090
      protocol: TCP
      targetPort: 9090
  # Ensures clients are routed to the same Prometheus Pod, which is necessary to get consistent dashboards in a highly-available setup. 
  sessionAffinity: ClientIP
  selector:
    k8s-app: prometheus
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: prometheus-1-prometheus
  labels: &Labels
    k8s-app: prometheus
    app.kubernetes.io/name: prometheus-1
    app.kubernetes.io/component: prometheus
spec:
  serviceName: "prometheus-1-prometheus"
  replicas: 3
  podManagementPolicy: "Parallel"
  updateStrategy:
    type: "RollingUpdate"
  selector:
    matchLabels: *Labels
  template:
    metadata:
      labels: *Labels
    spec:
      serviceAccountName: prometheus-1-prometheus
      initContainers:
      - name: "init-chown-data"
        image: marketplace.gcr.io/google/prometheus/debian9:2.11
        imagePullPolicy: Always
        command: ["chown", "-R", "65534:65534", "/data"]
        volumeMounts:
        - name: prometheus-1-prometheus-data
          mountPath: /data
          subPath: ""
      containers:
        - name: prometheus-server
          image: marketplace.gcr.io/google/prometheus:2.11
          imagePullPolicy: "IfNotPresent"
          args:
            - --config.file=/etc/config/prometheus.yaml
            - --storage.tsdb.path=/data
            - --web.console.libraries=/etc/prometheus/console_libraries
            - --web.console.templates=/etc/prometheus/consoles
            - --web.enable-lifecycle
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
            - name: prometheus-1-prometheus-data
              mountPath: /data
              subPath: ""
      terminationGracePeriodSeconds: 300
      volumes:
        - name: config-volume
          configMap:
            name: prometheus-1-prometheus-config
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: k8s-app
                operator: In
                values:
                - prometheus
            topologyKey: "kubernetes.io/hostname"
  volumeClaimTemplates:
  - metadata:
      name: prometheus-1-prometheus-data
      labels: *Labels
    spec:
      storageClassName: "standard"
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: "16Gi"
